{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","nombreMascota","nombrePropietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","event","target","name","value","className","onSubmit","preventDefault","trim","id","shortid","generate","htmlFor","type","aria-describedby","placeholder","onChange","Cita","eliminarCita","modal","setModal","actualizarModal","Button","onClick","Modal","isOpen","style","top","ModalHeader","ModalBody","ModalFooter","setTimeout","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","citasActualizadas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61c4dd61.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport shortid from 'shortid'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n    // Crear State de citas\r\n    const [cita, actualizarCita] = useState({\r\n        nombreMascota: \"\",\r\n        nombrePropietario: \"\",\r\n        fecha: \"\",\r\n        hora: \"\",\r\n        sintomas: \"\"\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false)\r\n\r\n    // Funcion que se ejecuta cada que el usuario escribe en un input\r\n    const actualizarState = (event) => {\r\n        actualizarCita({\r\n        ...cita,\r\n        [event.target.name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    //   Cuando el usuario envia el formulario\r\n    const submitCita = (event) => {\r\n        event.preventDefault();\r\n\r\n        // Validar\r\n        if(nombreMascota.trim() === '' || nombrePropietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\r\n            actualizarError(true)\r\n            return;\r\n        }\r\n\r\n        // Eliminar alerta de error\r\n        actualizarError(false)\r\n\r\n        // Asignar un ID\r\n        cita.id = shortid.generate()\r\n\r\n        // Crear la cita\r\n        crearCita(cita)\r\n\r\n        // Reiniciar el form\r\n        actualizarCita({\r\n            nombreMascota: \"\",\r\n            nombrePropietario: \"\",\r\n            fecha: \"\",\r\n            hora: \"\",\r\n            sintomas: \"\"\r\n        })\r\n    };\r\n\r\n    const { nombreMascota, nombrePropietario, fecha, hora, sintomas } = cita;\r\n\r\n    return (\r\n        <div className=\"appContainer\">\r\n            <h1 className=\"text-center\">Crear cita</h1>\r\n            {\r\n                error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p>: null\r\n            }\r\n            <form className=\"form-group formContainer\" onSubmit={submitCita}>\r\n                <label className=\"mt-2\" htmlFor=\"nombreMascota \">\r\n                Nombre Mascota\r\n                </label>\r\n                <input\r\n                type=\"text\"\r\n                className=\"form-control w-75 \"\r\n                name=\"nombreMascota\"\r\n                id=\"nombreMascota\"\r\n                aria-describedby=\"helpId\"\r\n                placeholder=\"Ingrese nombre de la mascota...\"\r\n                onChange={actualizarState}\r\n                value={nombreMascota}\r\n                />\r\n                <label className=\"mt-2\" htmlFor=\"nombrePropietario \">\r\n                Nombre Dueño\r\n                </label>\r\n                <input\r\n                type=\"text\"\r\n                className=\"form-control w-75 \"\r\n                name=\"nombrePropietario\"\r\n                id=\"nombrePropietario\"\r\n                aria-describedby=\"helpId\"\r\n                placeholder=\"Ingrese nombre del dueño...\"\r\n                onChange={actualizarState}\r\n                value={nombrePropietario}\r\n                />\r\n                <label className=\"mt-2\" htmlFor=\"fecha \">\r\n                Fecha\r\n                </label>\r\n                <input\r\n                type=\"date\"\r\n                className=\"form-control w-75 \"\r\n                name=\"fecha\"\r\n                id=\"fecha\"\r\n                aria-describedby=\"helpId\"\r\n                onChange={actualizarState}\r\n                value={fecha}\r\n                />\r\n                <label className=\"mt-2\" htmlFor=\"hora \">\r\n                Hora\r\n                </label>\r\n                <input\r\n                type=\"time\"\r\n                className=\"form-control w-75 \"\r\n                name=\"hora\"\r\n                id=\"hora\"\r\n                aria-describedby=\"helpId\"\r\n                onChange={actualizarState}\r\n                value={hora}\r\n                />\r\n                <label className=\"mt-2\" htmlFor=\"sintomas \">\r\n                Síntomas\r\n                </label>\r\n                <textarea\r\n                className=\"form-control w-75 \"\r\n                name=\"sintomas\"\r\n                id=\"sintomas\"\r\n                aria-describedby=\"helpId\"\r\n                onChange={actualizarState}\r\n                value={sintomas}\r\n                />\r\n                <button type=\"submit\" className=\"btn btn-primary w-75 mt-3\">\r\n                AGREGAR CITA\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\nexport default Formulario;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst Cita = ({ cita, eliminarCita }) => {\r\n  const [modal, setModal] = useState(false);\r\n  const actualizarModal = () => {\r\n    setModal(!modal);\r\n  };\r\n  const confirmarEliminarCita = () => {\r\n    actualizarModal();\r\n    // Timeout para que se haga la animacion de cierre de modal\r\n    setTimeout(() => {\r\n      eliminarCita(id);\r\n    }, 75);\r\n  };\r\n\r\n  const modalStyles = {\r\n    top:\"35%\"\r\n  };\r\n  const { nombreMascota, nombrePropietario, fecha, hora, sintomas, id } = cita;\r\n  return (\r\n    <div className=\"cita mx-3\">\r\n      <p>\r\n        Mascota: <span>{nombreMascota}</span>\r\n      </p>\r\n      <p>\r\n        Propietario: <span>{nombrePropietario}</span>\r\n      </p>\r\n      <p>\r\n        Fecha: <span>{fecha}</span>\r\n      </p>\r\n      <p>\r\n        Hora: <span>{hora}</span>\r\n      </p>\r\n      <p>\r\n        Sintomas: <span>{sintomas}</span>\r\n      </p>\r\n\r\n      <Button\r\n        type=\"button\"\r\n        className=\"btn btn-danger w-100\"\r\n        onClick={actualizarModal}\r\n      >\r\n        Eliminar &times;\r\n      </Button>\r\n      <Modal isOpen={modal} style={modalStyles} >\r\n        <ModalHeader>\r\n          <h4>Confirmación</h4>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <h3>Esta seguro que desea eliminar esta cita ?</h3>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <div className=\"btn-group\">\r\n            <Button\r\n              type=\"button\"\r\n              className=\"btn btn-success w-100\"\r\n              onClick={confirmarEliminarCita}\r\n            >\r\n              Confimar\r\n            </Button>\r\n            <Button\r\n              type=\"button\"\r\n              className=\"btn btn-danger w-100\"\r\n              onClick={actualizarModal}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n          </div>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nCita.propTypes = {\r\n  cita: PropTypes.object.isRequired,\r\n  eliminarCita: PropTypes.func.isRequired,\r\n};\r\nexport default Cita;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\n\nfunction App() {\n\n  // Citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'))\n  if(!citasIniciales){\n    citasIniciales = []\n  }\n\n\n  // Arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  //UseEffect para realizar ciertas operaciones cuando el state cambia\n  useEffect(() => {\n\n    localStorage.setItem('citas', JSON.stringify(citas))\n\n  }, [citas]);\n\n  //Funcion que tome las citas actuales y agregue la nueva\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita]);\n  };\n\n  const eliminarCita = (id) => {\n    const citasActualizadas = citas.filter(cita => cita.id !== id);\n    guardarCitas(citasActualizadas)\n  };   \n\n  const titulo = citas.length === 0 ? \"No hay citas\" : \"Administra tus citas\";\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h1>{titulo}</h1>\n            {citas.map((cita) => (\n              <Cita cita={cita} key={cita.id} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}